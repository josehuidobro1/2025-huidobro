Class {
	#name : 'Worm',
	#superclass : 'Effect',
	#instVars : [
		'positionX',
		'positionY'
	],
	#category : 'IngSoft2-Model',
	#package : 'IngSoft2-Model'
}

{ #category : 'as yet unclassified' }
Worm class >> with: aX and: aY [
	(aX isInteger and: [ aY isInteger ]) ifFalse: [
		^ Error signal: 'Worm holes positions must be integers' ].
	(aX > 0 and: [ aY > 0 ]) ifFalse: [
		^ Error signal:
			  'Worm holes positions must be greater than zero' ].
	(aX = aY) ifTrue: [
		^ Error signal:
			  'Worm holes positions must be different' ].
	
	^ self new initializeWith: aX positionsOn: aY
]

{ #category : 'playing' }
Worm >> applyTo: aShip in: aGame [

	| aPosition newPosition |
	aPosition := aShip position.
	aPosition = positionX ifTrue: [ newPosition := positionY ].
	aPosition = positionY ifTrue: [ newPosition := positionX ].
	aShip receiveWormHoleEfffect: newPosition
]

{ #category : 'initialization' }
Worm >> initializeWith: aX positionsOn: aY [

	positionX := aX.
	positionY := aY
]

{ #category : 'playing' }
Worm >> isInside: aAmountOfCells [ 
	^ ((positionX between: 0 and: aAmountOfCells) and: [positionY between: 0 and: aAmountOfCells]) . 
]

{ #category : 'playing' }
Worm >> positions [
	^ { positionX. positionY. } .
]
